apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.frogermcs.androiddevmetrics'
apply plugin: 'io.fabric'

ext {

    secrets = [
            slackClientId        : keyProperty("SLACK_CLIENT_ID"),
            slackClientSecret    : keyProperty("SLACK_CLIENT_SECRET"),
            slackOauthRedirectUri: keyProperty("SLACK_OAUTH_REDIRECT_URI"),
            fabricApiKey         : keyProperty("FABRIC_API_KEY")
    ]
}

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.1"

    defaultConfig {
        applicationId "co.netguru.android.socialslack"
        minSdkVersion 21
        targetSdkVersion 26
        versionCode globalVersionCode
        versionName globalVersionName

        buildConfigField 'String', 'SLACK_CLIENT_ID', '"' + secrets.slackClientId + '"'
        buildConfigField 'String', 'SLACK_CLIENT_SECRET', '"' + secrets.slackClientSecret + '"'

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        manifestPlaceholders = [SLACK_OAUTH_REDIRECT_URI: secrets.slackOauthRedirectUri,
                                FABRIC_API_KEY          : secrets.fabricApiKey]
    }

    buildTypes {

        debug {
            versionNameSuffix "-DEBUG"
            applicationIdSuffix ".debug"
            debuggable true
            minifyEnabled true
            shrinkResources false
            useProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-rules.pro', 'proguard-rules-test.pro'
        }
        release {
            debuggable false
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'),
                    'proguard-rules.pro'
        }
    }

    flavorDimensions "default"

    productFlavors {
        mock {
            dimension "default"
            versionNameSuffix "-SNAPSHOT" // if plugin v. >= 2.2
            applicationIdSuffix ".mock"

            // put your secrets in the BuildConfig.java class, for example:
            // buildConfigField 'String', 'HOCKEY_APP_ID', "\"${secrets.hockeyAppId}\""
        }
        production {
            dimension "default"
            // inherit
        }
    }

    variantFilter { variant ->
        def buildName = variant.buildType.name
        def flavorName = variant.getFlavors().get(0).name
        // remove unnecessary variants
        ['release'].each {
            if (buildName == it) {
                ['mock'].each {
                    if (flavorName == it) {
                        variant.setIgnore(true)
                    }
                }
            }
        }
    }

    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }

    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/rxjava.properties'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        debug.java.srcDirs += 'src/debug/kotlin'
        release.java.srcDirs += 'src/release/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
    }

    lintOptions {
        abortOnError false
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
}

dependencies {

    // Support
    implementation libs.appCompat
    implementation libs.recyclerView
    implementation libs.supportDesignLib

    // MVP
    implementation(libs.mosby) {
        exclude module: 'appcompat-v7'
        exclude module: 'support-annotations'
    }

    implementation(libs.mosbyNullObject) {
        exclude module: 'support-annotations'
    }

    // Dagger
    implementation libs.dagger
    kapt proc.dagger
    compileOnly proc.javaxAnnotation


    implementation libs.rxJava2
    implementation(libs.rxKotlin2) {
        exclude module: 'rxjava'
        exclude module: 'kotlin-stdlib'
    }
    implementation(libs.rxAndroid2) {
        exclude module: 'rxjava'
    }

    // Views
    implementation libs.verticalViewPager
    implementation libs.gridLayout
    implementation libs.cardView
    implementation 'us.belka:androidtoggleswitch:1.2.2'

    // kotlin
    implementation libs.kotlin

    // Room
    implementation libs.room
    kapt proc.room
    implementation(libs.roomRxJava2) {
        exclude module: 'rxjava'
    }

    // OkHttp + Retrofit
    implementation libs.okHttp
    implementation libs.okHttpLoggingInterceptor
    implementation libs.retrofit
    implementation libs.retrofitGsonConverter
    implementation libs.retrofitRxJava2Adapter

    // Glide
    implementation libs.glide

    //PaperParcel
    implementation libs.paperParcel
    kapt proc.paperParcel

    // Timber
    implementation libs.timber

    // Crashlytics
    releaseImplementation(libs.fabric) {
        transitive = true
    }

    // Stetho
    debugImplementation libs.stetho

    // LeakCanary
    debugImplementation libs.leakCanary

    // BlockCanary
    debugImplementation libs.blockCanary

    // StrictMode
    debugImplementation libs.strictmodeNotifier

    // Unit testing
    testImplementation(test.junit) {
        exclude module: 'hamcrest-core'
    }
    testImplementation test.room
    testImplementation test.mockito
    testImplementation(test.mockitoKotlin) {
        exclude module: 'mockito-core'
    }
}