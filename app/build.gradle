apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

ext {

    secrets = [
            slackClientId         : keyProperty("SLACK_CLIENT_ID"),
            slackClientSecret     : keyProperty("SLACK_CLIENT_SECRET"),
            slackOauthRedirectUri : keyProperty("SLACK_OAUTH_REDIRECT_URI"),
    ]
}

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.3"

    defaultConfig {
        applicationId "co.netguru.android.socialslack"
        minSdkVersion 21
        targetSdkVersion 25
        versionCode globalVersionCode
        versionName globalVersionName

        buildConfigField 'String', 'SLACK_CLIENT_ID', '"' + secrets.slackClientId + '"'
        buildConfigField 'String', 'SLACK_CLIENT_SECRET', '"' + secrets.slackClientSecret + '"'

        manifestPlaceholders = [SLACK_OAUTH_REDIRECT_URI: secrets.slackOauthRedirectUri]

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {

        debug {
            versionNameSuffix "-DEBUG"
            applicationIdSuffix ".debug"
            debuggable true
            minifyEnabled true
            shrinkResources false
            useProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-rules.pro', 'proguard-rules-test.pro'
        }
        release {
            debuggable false
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
            useProguard true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'),
                    'proguard-rules.pro'
        }
    }

    flavorDimensions "default"

    productFlavors {
        mock {
            dimension "default"
            versionNameSuffix "-SNAPSHOT" // if plugin v. >= 2.2
            applicationIdSuffix ".mock"

            // put your secrets in the BuildConfig.java class, for example:
            // buildConfigField 'String', 'HOCKEY_APP_ID', "\"${secrets.hockeyAppId}\""
        }
        production {
            dimension "default"
            // inherit
        }
    }

    variantFilter { variant ->
        def buildName = variant.buildType.name
        def flavorName = variant.getFlavors().get(0).name
        // remove unnecessary variants
        ['release'].each {
            if (buildName.equals(it)) {
                ['mock'].each {
                    if (flavorName.equals(it)) {
                        variant.setIgnore(true)
                    }
                }
            }
        }
    }

    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/rxjava.properties'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        abortOnError false
    }

}

kapt {
    generateStubs = true
}

dependencies {

    // Support
    compile libs.appCompat
    compile libs.recyclerView

    // MVP
    compile(libs.mosby) {
        exclude module: 'appcompat-v7'
        exclude module: 'support-annotations'
    }

    compile(libs.mosbyNullObject) {
        exclude module: 'support-annotations'
    }

    // Dagger
    compile libs.dagger
    kapt proc.dagger
    provided proc.javaxAnnotation

    compile libs.rxKotlin2
    compile libs.rxAndroid2

    // kotlin
    compile libs.kotlin

    // OkHttp + Retrofit
    compile libs.okHttp
    compile libs.okHttpLoggingInterceptor
    compile libs.retrofit
    compile libs.retrofitGsonConverter
    compile libs.retrofitRxJavaAdapter

    // Stetho
    compile libs.stetho

    // LeakCanary
    compile libs.leakCanary

    // BlockCanary
    compile libs.blockCanary

    // StrictMode
    compile libs.strictmodeNotifier

    // Timber
    compile libs.timber

    // Unit testing
    testCompile(test.junit) {
        exclude module: 'hamcrest-core'
    }
    testCompile test.hamcrest
    testCompile test.mockito

    androidTestCompile test.hamcrest
    androidTestCompile libs.annotations
    androidTestCompile(test.androidJUnitRunner) {
        exclude module: 'support-annotations'
    }
    androidTestCompile(test.androidJUnit4Rules) {
        exclude module: 'support-annotations'
        exclude module: 'hamcrest-core'
    }
    androidTestCompile(test.espresso) {
        exclude module: 'hamcrest-library'
        exclude module: 'rules'
        exclude module: 'runner'
        exclude module: 'javax.annotation-api'
        exclude module: 'support-annotations'
    }
    androidTestCompile(test.espressoContrib) {
        exclude module: 'espresso-core'
        exclude module: 'hamcrest-core'
        exclude module: 'support-v4'
        exclude module: 'appcompat-v7'
        exclude module: 'recyclerview-v7'
        exclude module: 'support-annotations'
        exclude module: 'design'
    }
    androidTestCompile(test.espressoIntents) {
        exclude module: 'espresso-core'
        exclude module: 'support-annotations'
    }
    androidTestCompile(test.espressoIdlingResource) {
        exclude module: 'espresso-core'
    }
}
repositories {
    mavenCentral()
}